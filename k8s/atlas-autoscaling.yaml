# ==================================================================
# QUANTUM ATLAS AUTOSCALING - INFINITE SCALABILITY ARCHITECTURE
# Multi-dimensional scaling with predictive autoscaling
# ==================================================================

# ==================================================================
# QUANTUM HORIZONTAL POD AUTOSCALER (HPA)
# ==================================================================
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: astral-turf-quantum-hpa
  namespace: astral-turf
  labels:
    app: astral-turf
    atlas.component: 'autoscaling'
    atlas.scaling.type: 'horizontal'
    atlas.availability.critical: 'true'
  annotations:
    atlas.scaling.strategy: 'predictive'
    atlas.scaling.behavior: 'aggressive'
    atlas.metrics.custom: 'enabled'
    atlas.cost.optimization: 'enabled'
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: astral-turf
  minReplicas: 5 # High availability baseline
  maxReplicas: 200 # Massive scale capability

  # Multi-dimensional scaling metrics
  metrics:
    # CPU-based scaling
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 65 # Conservative CPU threshold

    # Memory-based scaling
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 75 # Memory threshold

    # Request rate scaling
    - type: Pods
      pods:
        metric:
          name: http_requests_per_second
        target:
          type: AverageValue
          averageValue: '500' # 500 RPS per pod

    # Response time scaling
    - type: Pods
      pods:
        metric:
          name: http_request_duration_p95
        target:
          type: AverageValue
          averageValue: '200m' # 200ms P95 latency

    # Connection count scaling
    - type: Pods
      pods:
        metric:
          name: active_connections
        target:
          type: AverageValue
          averageValue: '100' # 100 active connections per pod

    # Error rate scaling (scale up on errors)
    - type: Pods
      pods:
        metric:
          name: error_rate_percentage
        target:
          type: AverageValue
          averageValue: '1' # Scale up if error rate > 1%

    # Queue depth scaling
    - type: Pods
      pods:
        metric:
          name: queue_depth
        target:
          type: AverageValue
          averageValue: '10' # Scale up if queue depth > 10

  # Advanced scaling behavior
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 600 # 10 minutes stability before scale down
      policies:
        - type: Percent
          value: 10 # Scale down 10% at a time
          periodSeconds: 300 # Every 5 minutes
        - type: Pods
          value: 2 # Maximum 2 pods at once
          periodSeconds: 300
      selectPolicy: Min # Use the most conservative policy

    scaleUp:
      stabilizationWindowSeconds: 60 # 1 minute stability before scale up
      policies:
        - type: Percent
          value: 100 # Double capacity under load
          periodSeconds: 60
        - type: Pods
          value: 10 # Add up to 10 pods at once
          periodSeconds: 60
        - type: Percent
          value: 200 # Emergency scaling: triple capacity
          periodSeconds: 300
      selectPolicy: Max # Use the most aggressive policy

---
# ==================================================================
# QUANTUM VERTICAL POD AUTOSCALER (VPA)
# ==================================================================
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: astral-turf-quantum-vpa
  namespace: astral-turf
  labels:
    app: astral-turf
    atlas.component: 'autoscaling'
    atlas.scaling.type: 'vertical'
  annotations:
    atlas.scaling.mode: 'auto'
    atlas.resource.optimization: 'enabled'
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: astral-turf
  updatePolicy:
    updateMode: 'Auto' # Automatically apply recommendations
    minReplicas: 1
  resourcePolicy:
    containerPolicies:
      - containerName: astral-turf
        minAllowed:
          cpu: 200m
          memory: 256Mi
          ephemeral-storage: 1Gi
        maxAllowed:
          cpu: 4000m # 4 CPU cores max per pod
          memory: 8Gi # 8GB memory max per pod
          ephemeral-storage: 10Gi
        controlledResources: ['cpu', 'memory', 'ephemeral-storage']
        controlledValues: RequestsAndLimits
        mode: Auto

---
# ==================================================================
# QUANTUM CLUSTER AUTOSCALER CONFIGURATION
# ==================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: cluster-autoscaler-status
  namespace: astral-turf
  labels:
    atlas.component: 'cluster-autoscaling'
data:
  nodes.max: '100' # Maximum cluster size
  nodes.min: '3' # Minimum cluster size
  scale-down-enabled: 'true'
  scale-down-delay-after-add: '10m'
  scale-down-unneeded-time: '10m'
  scale-down-utilization-threshold: '0.5'
  skip-nodes-with-local-storage: 'false'
  skip-nodes-with-system-pods: 'false'
  max-node-provision-time: '15m'
  scan-interval: '10s'
  max-nodes-total: '100'
  cores-total: '0:6400' # 0 to 6400 cores
  memory-total: '0:6400Gi' # 0 to 6400GB memory

---
# ==================================================================
# QUANTUM PREDICTIVE SCALING CONFIGURATION
# ==================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: predictive-scaling-config
  namespace: astral-turf
  labels:
    atlas.component: 'predictive-scaling'
    atlas.ai.enabled: 'true'
data:
  # Time-based scaling patterns
  scaling-patterns.yaml: |
    patterns:
      # Weekday patterns
      - name: "weekday-business-hours"
        schedule: "0 8 * * 1-5"  # 8 AM weekdays
        min-replicas: 15
        max-replicas: 50
        duration: "10h"
        
      - name: "weekday-off-hours"
        schedule: "0 18 * * 1-5"  # 6 PM weekdays
        min-replicas: 8
        max-replicas: 25
        duration: "14h"
        
      # Weekend patterns
      - name: "weekend-peak"
        schedule: "0 10 * * 6-7"  # 10 AM weekends
        min-replicas: 12
        max-replicas: 40
        duration: "12h"
        
      - name: "weekend-low"
        schedule: "0 22 * * 6-7"  # 10 PM weekends
        min-replicas: 5
        max-replicas: 15
        duration: "12h"
        
      # Holiday scaling
      - name: "holiday-surge"
        dates: ["2024-12-25", "2024-01-01", "2024-07-04"]
        min-replicas: 20
        max-replicas: 100
        duration: "24h"

    # Machine learning predictions
    ml-config:
      enabled: true
      model: "prophet"  # Facebook Prophet for time series
      prediction-window: "2h"  # Predict 2 hours ahead
      confidence-threshold: 0.8
      training-data-days: 30
      retrain-interval: "24h"
      
    # External signals
    external-signals:
      - name: "traffic-forecast"
        source: "google-analytics"
        weight: 0.3
      - name: "social-media-mentions"
        source: "twitter-api"
        weight: 0.2
      - name: "promotional-events"
        source: "marketing-calendar"
        weight: 0.5

---
# ==================================================================
# QUANTUM RESOURCE QUOTAS AND LIMITS
# ==================================================================
apiVersion: v1
kind: ResourceQuota
metadata:
  name: astral-turf-quantum-quota
  namespace: astral-turf
  labels:
    atlas.component: 'resource-management'
spec:
  hard:
    # Pod limits
    pods: '250'
    persistentvolumeclaims: '50'
    services: '20'
    secrets: '20'
    configmaps: '30'

    # Compute resources
    requests.cpu: '100' # 100 CPU cores
    requests.memory: '400Gi' # 400GB memory
    limits.cpu: '200' # 200 CPU cores
    limits.memory: '800Gi' # 800GB memory

    # Storage
    requests.storage: '1Ti' # 1TB storage

    # Ephemeral storage
    requests.ephemeral-storage: '500Gi'
    limits.ephemeral-storage: '1Ti'

---
# ==================================================================
# QUANTUM LIMIT RANGES
# ==================================================================
apiVersion: v1
kind: LimitRange
metadata:
  name: astral-turf-quantum-limits
  namespace: astral-turf
  labels:
    atlas.component: 'resource-management'
spec:
  limits:
    # Pod limits
    - type: Pod
      max:
        cpu: '8'
        memory: '16Gi'
        ephemeral-storage: '20Gi'
      min:
        cpu: '100m'
        memory: '128Mi'
        ephemeral-storage: '1Gi'

    # Container limits
    - type: Container
      default:
        cpu: '500m'
        memory: '1Gi'
        ephemeral-storage: '2Gi'
      defaultRequest:
        cpu: '200m'
        memory: '512Mi'
        ephemeral-storage: '1Gi'
      max:
        cpu: '4'
        memory: '8Gi'
        ephemeral-storage: '10Gi'
      min:
        cpu: '50m'
        memory: '64Mi'
        ephemeral-storage: '512Mi'

    # PVC limits
    - type: PersistentVolumeClaim
      max:
        storage: '100Gi'
      min:
        storage: '1Gi'
