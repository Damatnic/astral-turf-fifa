import { test, expect, Page } from '@playwright/test';

/**
 * Comprehensive E2E tests for tactical board workflows
 * Tests complete user journeys from start to finish
 */

// Test data and utilities
class TacticalBoardPage {
  constructor(private page: Page) {}

  async navigateToBoard() {
    await this.page.goto('http://localhost:3012');
    await this.page.waitForSelector('[role="application"]', { timeout: 10000 });
  }

  async waitForBoardToLoad() {
    await this.page.waitForSelector('[role="main"]', { timeout: 10000 });
    await this.page.waitForLoadState('networkidle');
  }

  async selectPlayer(playerName: string) {
    await this.page.click(`[aria-label*="${playerName}"]`);
  }

  async dragPlayerToPosition(playerSelector: string, x: number, y: number) {
    const player = await this.page.locator(playerSelector);
    const field = await this.page.locator('[role="main"]');
    
    await player.dragTo(field, { 
      targetPosition: { x, y },
      force: true 
    });
  }

  async openFormationTemplates() {
    await this.page.click('[data-testid="formation-templates-button"]', { timeout: 5000 });
    await this.page.waitForSelector('[data-testid="formation-templates"]', { timeout: 5000 });
  }

  async selectFormation(formationName: string) {
    await this.page.click(`text=${formationName}`);
  }

  async openPlayerDisplaySettings() {
    await this.page.click('[data-testid="player-display-settings-button"]');
    await this.page.waitForSelector('[data-testid="player-display-settings"]');
  }

  async togglePlayerNames() {
    await this.page.click('[aria-label*="show player names"]');
  }

  async changePlayerSize(size: 'small' | 'medium' | 'large') {\n    await this.page.selectOption('[aria-label*="player size"]', size);\n  }\n\n  async openBench() {\n    await this.page.click('[data-testid="bench-toggle"]');\n    await this.page.waitForSelector('[data-testid="positional-bench"]');\n  }\n\n  async substitutePlayer(benchPlayerName: string, fieldPlayerName: string) {\n    // Drag from bench to field\n    const benchPlayer = this.page.locator(`[data-testid="positional-bench"] [aria-label*="${benchPlayerName}"]`);\n    const fieldPlayer = this.page.locator(`[role="main"] [aria-label*="${fieldPlayerName}"]`);\n    \n    await benchPlayer.dragTo(fieldPlayer);\n  }\n\n  async startDrawing(tool: 'pen' | 'line' | 'arrow' | 'circle') {\n    await this.page.click(`[data-testid="drawing-tool-${tool}"]`);\n  }\n\n  async drawOnField(startX: number, startY: number, endX: number, endY: number) {\n    const field = this.page.locator('[role="main"]');\n    \n    await field.hover({ position: { x: startX, y: startY } });\n    await this.page.mouse.down();\n    await field.hover({ position: { x: endX, y: endY } });\n    await this.page.mouse.up();\n  }\n\n  async enterFullscreen() {\n    await this.page.click('[data-testid="fullscreen-button"]');\n  }\n\n  async exitFullscreen() {\n    await this.page.keyboard.press('Escape');\n  }\n\n  async openAIAssistant() {\n    await this.page.click('[data-testid="ai-assistant-button"]');\n    await this.page.waitForSelector('[data-testid="intelligent-assistant"]');\n  }\n\n  async saveFormation(name: string) {\n    await this.page.click('[data-testid="save-formation-button"]');\n    await this.page.fill('[data-testid="formation-name-input"]', name);\n    await this.page.click('[data-testid="confirm-save"]');\n  }\n\n  async exportFormation() {\n    await this.page.click('[data-testid="export-button"]');\n    await this.page.waitForSelector('[data-testid="export-options"]');\n  }\n\n  async takeScreenshot(name: string) {\n    await this.page.screenshot({ \n      path: `test-results/screenshots/${name}.png`,\n      fullPage: true \n    });\n  }\n}\n\ntest.describe('Tactical Board - Complete User Workflows', () => {\n  let tacticalBoard: TacticalBoardPage;\n\n  test.beforeEach(async ({ page }) => {\n    tacticalBoard = new TacticalBoardPage(page);\n    await tacticalBoard.navigateToBoard();\n    await tacticalBoard.waitForBoardToLoad();\n  });\n\n  test.describe('Formation Management Workflow', () => {\n    test('should complete full formation creation and customization workflow', async ({ page }) => {\n      // Step 1: Start with default formation\n      await expect(page.locator('[role=\"application\"]')).toBeVisible();\n      \n      // Step 2: Open formation templates\n      await tacticalBoard.openFormationTemplates();\n      await expect(page.locator('[data-testid=\"formation-templates\"]')).toBeVisible();\n      \n      // Step 3: Select a formation (e.g., 4-3-3)\n      await tacticalBoard.selectFormation('4-3-3');\n      await page.waitForTimeout(1000); // Wait for formation to apply\n      \n      // Step 4: Customize player positions\n      await tacticalBoard.dragPlayerToPosition('[data-testid=\"player-token\"]:first-child', 300, 200);\n      await page.waitForTimeout(500);\n      \n      // Step 5: Adjust player display settings\n      await tacticalBoard.openPlayerDisplaySettings();\n      await tacticalBoard.togglePlayerNames();\n      await tacticalBoard.changePlayerSize('large');\n      \n      // Step 6: Save the formation\n      await tacticalBoard.saveFormation('Custom 4-3-3 Formation');\n      \n      // Verify the workflow completed successfully\n      await expect(page.locator('text=Formation saved successfully')).toBeVisible({ timeout: 5000 });\n      \n      await tacticalBoard.takeScreenshot('formation-creation-workflow');\n    });\n\n    test('should handle formation switching and comparison', async ({ page }) => {\n      // Test switching between different formations\n      await tacticalBoard.openFormationTemplates();\n      \n      // Try multiple formations\n      const formations = ['4-4-2', '3-5-2', '4-2-3-1'];\n      \n      for (const formation of formations) {\n        await tacticalBoard.selectFormation(formation);\n        await page.waitForTimeout(1000);\n        \n        // Verify formation is applied\n        await expect(page.locator('[role=\"main\"]')).toBeVisible();\n        \n        // Take screenshot for comparison\n        await tacticalBoard.takeScreenshot(`formation-${formation.replace(/-/g, '')}`);\n      }\n    });\n  });\n\n  test.describe('Player Management Workflow', () => {\n    test('should complete full player substitution workflow', async ({ page }) => {\n      // Step 1: Open the bench\n      await tacticalBoard.openBench();\n      await expect(page.locator('[data-testid=\"positional-bench\"]')).toBeVisible();\n      \n      // Step 2: Select a player from bench\n      const benchPlayer = page.locator('[data-testid=\"positional-bench\"] [data-testid*=\"player-card\"]:first-child');\n      await expect(benchPlayer).toBeVisible();\n      \n      // Step 3: Select a field player to substitute\n      const fieldPlayer = page.locator('[role=\"main\"] [data-testid*=\"player-token\"]:first-child');\n      await expect(fieldPlayer).toBeVisible();\n      \n      // Step 4: Perform substitution via drag and drop\n      await benchPlayer.dragTo(fieldPlayer);\n      \n      // Step 5: Confirm substitution if needed\n      const confirmButton = page.locator('[data-testid=\"confirm-substitution\"]');\n      if (await confirmButton.isVisible({ timeout: 2000 })) {\n        await confirmButton.click();\n      }\n      \n      // Verify substitution completed\n      await page.waitForTimeout(1000);\n      await expect(page.locator('[role=\"main\"]')).toBeVisible();\n      \n      await tacticalBoard.takeScreenshot('player-substitution-workflow');\n    });\n\n    test('should handle multiple player interactions', async ({ page }) => {\n      // Test selecting multiple players\n      const playerTokens = page.locator('[role=\"main\"] [data-testid*=\"player-token\"]');\n      \n      // Select first player\n      await playerTokens.first().click();\n      \n      // Multi-select with Ctrl+Click\n      await page.keyboard.down('Control');\n      await playerTokens.nth(1).click();\n      await playerTokens.nth(2).click();\n      await page.keyboard.up('Control');\n      \n      // Verify multiple selection\n      const selectedPlayers = page.locator('[data-selected=\"true\"]');\n      await expect(selectedPlayers).toHaveCount(3);\n      \n      await tacticalBoard.takeScreenshot('multiple-player-selection');\n    });\n  });\n\n  test.describe('Drawing and Tactical Analysis Workflow', () => {\n    test('should complete tactical drawing and annotation workflow', async ({ page }) => {\n      // Step 1: Select drawing tool\n      await tacticalBoard.startDrawing('pen');\n      \n      // Step 2: Draw tactical lines\n      await tacticalBoard.drawOnField(100, 150, 300, 250);\n      await page.waitForTimeout(500);\n      \n      // Step 3: Switch to arrow tool\n      await tacticalBoard.startDrawing('arrow');\n      \n      // Step 4: Draw arrows for player movements\n      await tacticalBoard.drawOnField(200, 200, 400, 300);\n      await page.waitForTimeout(500);\n      \n      // Step 5: Add circle annotations\n      await tacticalBoard.startDrawing('circle');\n      await tacticalBoard.drawOnField(350, 150, 380, 180);\n      \n      // Verify drawings are visible\n      await expect(page.locator('[data-testid=\"drawing-canvas\"]')).toBeVisible();\n      \n      await tacticalBoard.takeScreenshot('tactical-drawing-workflow');\n    });\n\n    test('should handle complex tactical scenarios', async ({ page }) => {\n      // Create a complex tactical scenario\n      \n      // Step 1: Set up formation\n      await tacticalBoard.openFormationTemplates();\n      await tacticalBoard.selectFormation('4-2-3-1');\n      \n      // Step 2: Move players to custom positions\n      const players = page.locator('[role=\"main\"] [data-testid*=\"player-token\"]');\n      \n      for (let i = 0; i < 3; i++) {\n        await players.nth(i).dragTo(page.locator('[role=\"main\"]'), {\n          targetPosition: { x: 200 + (i * 100), y: 300 }\n        });\n        await page.waitForTimeout(300);\n      }\n      \n      // Step 3: Add tactical drawings\n      await tacticalBoard.startDrawing('line');\n      \n      // Draw formation lines\n      await tacticalBoard.drawOnField(150, 250, 450, 250); // Defensive line\n      await tacticalBoard.drawOnField(150, 350, 450, 350); // Midfield line\n      \n      // Step 4: Add movement arrows\n      await tacticalBoard.startDrawing('arrow');\n      await tacticalBoard.drawOnField(250, 300, 350, 200); // Attack movement\n      \n      await tacticalBoard.takeScreenshot('complex-tactical-scenario');\n    });\n  });\n\n  test.describe('Advanced Features Workflow', () => {\n    test('should complete AI assistant workflow', async ({ page }) => {\n      // Step 1: Open AI assistant\n      await tacticalBoard.openAIAssistant();\n      await expect(page.locator('[data-testid=\"intelligent-assistant\"]')).toBeVisible();\n      \n      // Step 2: Request formation analysis\n      const analysisButton = page.locator('[data-testid=\"analyze-formation\"]');\n      if (await analysisButton.isVisible({ timeout: 3000 })) {\n        await analysisButton.click();\n        \n        // Wait for analysis results\n        await expect(page.locator('[data-testid=\"analysis-results\"]')).toBeVisible({ timeout: 10000 });\n      }\n      \n      // Step 3: Request player suggestions\n      const suggestionsButton = page.locator('[data-testid=\"player-suggestions\"]');\n      if (await suggestionsButton.isVisible({ timeout: 3000 })) {\n        await suggestionsButton.click();\n        \n        // Wait for suggestions\n        await page.waitForTimeout(2000);\n      }\n      \n      await tacticalBoard.takeScreenshot('ai-assistant-workflow');\n    });\n\n    test('should handle fullscreen and presentation modes', async ({ page }) => {\n      // Step 1: Enter fullscreen mode\n      await tacticalBoard.enterFullscreen();\n      \n      // Verify fullscreen\n      await page.waitForTimeout(1000);\n      \n      // Step 2: Test functionality in fullscreen\n      await tacticalBoard.openPlayerDisplaySettings();\n      await tacticalBoard.togglePlayerNames();\n      \n      // Step 3: Exit fullscreen\n      await tacticalBoard.exitFullscreen();\n      \n      // Verify normal mode\n      await page.waitForTimeout(1000);\n      \n      await tacticalBoard.takeScreenshot('fullscreen-workflow');\n    });\n\n    test('should complete export and sharing workflow', async ({ page }) => {\n      // Step 1: Create a formation to export\n      await tacticalBoard.openFormationTemplates();\n      await tacticalBoard.selectFormation('4-3-3');\n      \n      // Step 2: Add some tactical drawings\n      await tacticalBoard.startDrawing('arrow');\n      await tacticalBoard.drawOnField(200, 200, 300, 150);\n      \n      // Step 3: Export the formation\n      await tacticalBoard.exportFormation();\n      \n      // Step 4: Verify export options are available\n      await expect(page.locator('[data-testid=\"export-options\"]')).toBeVisible();\n      \n      // Step 5: Select export format (if available)\n      const pngExport = page.locator('[data-testid=\"export-png\"]');\n      if (await pngExport.isVisible({ timeout: 3000 })) {\n        await pngExport.click();\n      }\n      \n      await tacticalBoard.takeScreenshot('export-workflow');\n    });\n  });\n\n  test.describe('Performance and Stress Testing', () => {\n    test('should handle rapid user interactions', async ({ page }) => {\n      // Rapid clicking and interactions\n      const field = page.locator('[role=\"main\"]');\n      \n      // Rapid clicks across the field\n      for (let i = 0; i < 10; i++) {\n        await field.click({ position: { x: 100 + (i * 30), y: 150 + (i * 20) } });\n        await page.waitForTimeout(50);\n      }\n      \n      // Rapid tool switching\n      const tools = ['pen', 'line', 'arrow', 'circle'];\n      for (const tool of tools) {\n        await tacticalBoard.startDrawing(tool as any);\n        await page.waitForTimeout(100);\n      }\n      \n      // Verify UI remains responsive\n      await expect(page.locator('[role=\"application\"]')).toBeVisible();\n    });\n\n    test('should handle complex formations with many players', async ({ page }) => {\n      // Test with maximum players and formations\n      await tacticalBoard.openFormationTemplates();\n      \n      // Try multiple formation changes rapidly\n      const formations = ['4-4-2', '3-5-2', '4-3-3', '5-3-2', '4-2-3-1'];\n      \n      for (const formation of formations) {\n        await tacticalBoard.selectFormation(formation);\n        await page.waitForTimeout(200);\n        \n        // Move multiple players\n        const players = page.locator('[role=\"main\"] [data-testid*=\"player-token\"]');\n        \n        for (let i = 0; i < 5; i++) {\n          if (await players.nth(i).isVisible()) {\n            await players.nth(i).dragTo(page.locator('[role=\"main\"]'), {\n              targetPosition: { x: 150 + (i * 50), y: 200 + (i * 30) }\n            });\n          }\n        }\n      }\n      \n      await tacticalBoard.takeScreenshot('complex-formation-stress-test');\n    });\n  });\n\n  test.describe('Error Handling and Edge Cases', () => {\n    test('should handle network disconnection gracefully', async ({ page, context }) => {\n      // Simulate network issues\n      await context.setOffline(true);\n      \n      // Try to perform actions that might require network\n      await tacticalBoard.openFormationTemplates();\n      \n      // Should show appropriate error handling\n      await page.waitForTimeout(2000);\n      \n      // Restore network\n      await context.setOffline(false);\n      \n      // Verify recovery\n      await page.waitForTimeout(1000);\n      await expect(page.locator('[role=\"application\"]')).toBeVisible();\n    });\n\n    test('should handle browser resize and orientation changes', async ({ page }) => {\n      // Test different viewport sizes\n      const viewports = [\n        { width: 1920, height: 1080 }, // Desktop\n        { width: 1024, height: 768 },  // Tablet\n        { width: 375, height: 667 },   // Mobile\n      ];\n      \n      for (const viewport of viewports) {\n        await page.setViewportSize(viewport);\n        await page.waitForTimeout(1000);\n        \n        // Verify UI adapts correctly\n        await expect(page.locator('[role=\"application\"]')).toBeVisible();\n        \n        // Test basic functionality\n        const field = page.locator('[role=\"main\"]');\n        if (await field.isVisible()) {\n          await field.click({ position: { x: 100, y: 100 } });\n        }\n        \n        await tacticalBoard.takeScreenshot(`viewport-${viewport.width}x${viewport.height}`);\n      }\n    });\n\n    test('should handle rapid navigation and state changes', async ({ page }) => {\n      // Rapid opening and closing of modals\n      for (let i = 0; i < 5; i++) {\n        await tacticalBoard.openFormationTemplates();\n        await page.waitForTimeout(200);\n        \n        // Close modal\n        await page.keyboard.press('Escape');\n        await page.waitForTimeout(200);\n        \n        await tacticalBoard.openPlayerDisplaySettings();\n        await page.waitForTimeout(200);\n        \n        // Close modal\n        await page.keyboard.press('Escape');\n        await page.waitForTimeout(200);\n      }\n      \n      // Verify UI remains stable\n      await expect(page.locator('[role=\"application\"]')).toBeVisible();\n    });\n  });\n\n  test.describe('Accessibility Testing', () => {\n    test('should support full keyboard navigation', async ({ page }) => {\n      // Start from the main application\n      const app = page.locator('[role=\"application\"]');\n      await app.focus();\n      \n      // Tab through all focusable elements\n      for (let i = 0; i < 20; i++) {\n        await page.keyboard.press('Tab');\n        await page.waitForTimeout(100);\n        \n        // Verify focus is visible\n        const focusedElement = page.locator(':focus');\n        await expect(focusedElement).toBeVisible();\n      }\n      \n      // Test arrow key navigation\n      await page.keyboard.press('ArrowRight');\n      await page.keyboard.press('ArrowDown');\n      await page.keyboard.press('ArrowLeft');\n      await page.keyboard.press('ArrowUp');\n      \n      // Test Enter and Space activation\n      await page.keyboard.press('Enter');\n      await page.waitForTimeout(500);\n      \n      await page.keyboard.press('Space');\n      await page.waitForTimeout(500);\n    });\n\n    test('should have proper ARIA attributes and screen reader support', async ({ page }) => {\n      // Check main landmarks\n      await expect(page.locator('[role=\"application\"]')).toHaveAttribute('aria-label');\n      await expect(page.locator('[role=\"main\"]')).toBeVisible();\n      \n      // Check form controls have labels\n      const formControls = page.locator('input, button, select');\n      const count = await formControls.count();\n      \n      for (let i = 0; i < Math.min(count, 10); i++) {\n        const control = formControls.nth(i);\n        \n        // Should have either aria-label, aria-labelledby, or associated label\n        const hasAria = await control.getAttribute('aria-label');\n        const hasLabelledBy = await control.getAttribute('aria-labelledby');\n        const hasId = await control.getAttribute('id');\n        \n        if (hasId) {\n          const associatedLabel = page.locator(`label[for=\"${hasId}\"]`);\n          const labelExists = await associatedLabel.count() > 0;\n          \n          expect(hasAria || hasLabelledBy || labelExists).toBeTruthy();\n        }\n      }\n    });\n  });\n});"