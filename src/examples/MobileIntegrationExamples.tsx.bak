/**
 * Mobile Integration Example
 * Demonstrates how to integrate mobile responsiveness into existing components
 * 
 * ‚ö†Ô∏è  TEMPORARILY DISABLED - TypeScript Errors ‚ö†Ô∏è
 * This file has been commented out to reduce build errors.
 * 
 * Issues to fix before re-enabling:
 * 1. Import path casing: '@/components/layout' should be '@/components/Layout'  
 * 2. Missing component exports: ResponsiveContainer, ResponsiveGrid, ResponsiveModal, TouchButton
 * 3. Component prop mismatches: MobileHeader.showBackButton, MobileFAB.label
 * 4. Hook return type issues: usePinchGesture doesn't return 'handlers'
 * 5. Type safety issues with gesture types
 * 
 * TODO: Either implement missing components OR remove this example file entirely
 * Status: Example/Demo code - NOT used in production
 */

/*
import React, { useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useResponsive } from '@/hooks/useResponsive';
import { useGestureElement, usePinchGesture } from '@/hooks/useTouchGestures';
import {
  MobileBottomNav,
  MobileNavItem,
  MobileDrawer,
  MobileHeader,
  MobileBottomSheet,
  MobileFAB,
} from '@/components/mobile';
import {
  ResponsiveContainer,
  ResponsiveGrid,
  ResponsiveModal,
  TouchButton,
} from '@/components/layout';

/**
 * Example 1: Mobile-Responsive App Layout
 * Shows how to create a layout that adapts to mobile with bottom navigation
 */
export const MobileAppLayout: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { isMobile } = useResponsive();
  const navigate = useNavigate();
  const { pathname } = useLocation();
  const [drawerOpen, setDrawerOpen] = useState(false);

  return (
    <div className="h-screen flex flex-col">
      {/* Mobile Header */}
      {isMobile && (
        <MobileHeader
          title="Astral Turf"
          onMenuClick={() => setDrawerOpen(true)}
          showBackButton={pathname !== '/'}
          onBackClick={() => navigate(-1)}
        />
      )}

      {/* Main Content Area */}
      <main className="flex-1 overflow-y-auto pb-16 md:pb-0">
        {children}
      </main>

      {/* Mobile Bottom Navigation */}
      {isMobile && (
        <MobileBottomNav>
          <MobileNavItem
            icon={<span>üè†</span>}
            label="Home"
            active={pathname === '/'}
            onClick={() => navigate('/')}
          />
          <MobileNavItem
            icon={<span>‚öΩ</span>}
            label="Board"
            active={pathname === '/board'}
            onClick={() => navigate('/board')}
          />
          <MobileNavItem
            icon={<span>üìö</span>}
            label="Plays"
            active={pathname === '/plays'}
            onClick={() => navigate('/plays')}
            badge={3}
          />
          <MobileNavItem
            icon={<span>üë§</span>}
            label="Profile"
            active={pathname === '/profile'}
            onClick={() => navigate('/profile')}
          />
        </MobileBottomNav>
      )}

      {/* Mobile Navigation Drawer */}
      <MobileDrawer
        isOpen={drawerOpen}
        onClose={() => setDrawerOpen(false)}
        position="left"
      >
        <nav className="p-6 space-y-4">
          <h2 className="text-xl font-bold text-white mb-6">Menu</h2>
          <button className="block w-full text-left p-3 hover:bg-gray-700 rounded">
            Settings
          </button>
          <button className="block w-full text-left p-3 hover:bg-gray-700 rounded">
            Help
          </button>
          <button className="block w-full text-left p-3 hover:bg-gray-700 rounded">
            About
          </button>
        </nav>
      </MobileDrawer>
    </div>
  );
};

/**
 * Example 2: Mobile Tactical Board with Touch Controls
 * Demonstrates pinch-to-zoom and gesture handling
 */
export const MobileTacticalBoard: React.FC = () => {
  const [scale, setScale] = useState(1);
  const [selectedPlayer, setSelectedPlayer] = useState<string | null>(null);
  const [detailsOpen, setDetailsOpen] = useState(false);

  // Pinch-to-zoom gesture
  const { handlers: pinchHandlers } = usePinchGesture(
    (gesture) => {
      setScale((prev) => Math.min(3, Math.max(0.5, prev * gesture.scale)));
    },
    { minScale: 0.5, maxScale: 3.0 }
  );

  // Tap gesture for player selection
  const boardRef = useGestureElement({
    onTap: (position) => {
      // Find player at position and select
      const player = findPlayerAtPosition(position);
      if (player) {
        setSelectedPlayer(player.id);
        setDetailsOpen(true);
      }
    },
    onDoubleTap: () => {
      // Reset zoom on double-tap
      setScale(1);
    },
  });

  return (
    <>
      <div className="h-full overflow-hidden">
        <div
          ref={boardRef}
          {...pinchHandlers}
          className="w-full h-full"
          style={{
            transform: `scale(${scale})`,
            transition: 'transform 0.1s',
            touchAction: 'none', // Prevent browser zoom
          }}
        >
          {/* Soccer field and players */}
          <SoccerField />
          <Players onPlayerTap={(id) => {
            setSelectedPlayer(id);
            setDetailsOpen(true);
          }} />
        </div>

        {/* Zoom controls */}
        <div className="fixed bottom-20 right-4 space-y-2 md:bottom-4">
          <TouchButton
            onClick={() => setScale((s) => Math.min(3, s + 0.5))}
            variant="secondary"
            size="sm"
          >
            +
          </TouchButton>
          <TouchButton
            onClick={() => setScale((s) => Math.max(0.5, s - 0.5))}
            variant="secondary"
            size="sm"
          >
            -
          </TouchButton>
        </div>
      </div>

      {/* Player Details Bottom Sheet */}
      <MobileBottomSheet
        isOpen={detailsOpen}
        onClose={() => setDetailsOpen(false)}
        snapPoints={[0.3, 0.6, 0.9]}
        title="Player Details"
      >
        {selectedPlayer && (
          <div className="p-4 space-y-4">
            <h3 className="text-lg font-semibold">Player #{selectedPlayer}</h3>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <p className="text-gray-400 text-sm">Position</p>
                <p className="text-white">Striker</p>
              </div>
              <div>
                <p className="text-gray-400 text-sm">Rating</p>
                <p className="text-white">85</p>
              </div>
            </div>
            <TouchButton variant="primary" fullWidth onClick={() => {}}>
              Edit Player
            </TouchButton>
          </div>
        )}
      </MobileBottomSheet>
    </>
  );
};

/**
 * Example 3: Responsive Formation Gallery
 * Shows grid layout that adapts to screen size
 */
export const FormationGallery: React.FC = () => {
  const [selectedFormation, setSelectedFormation] = useState<string | null>(null);
  const { isMobile } = useResponsive();

  const formations = [
    { id: '4-4-2', name: '4-4-2', description: 'Classic balanced formation' },
    { id: '4-3-3', name: '4-3-3', description: 'Attacking formation' },
    { id: '3-5-2', name: '3-5-2', description: 'Defensive formation' },
    { id: '4-2-3-1', name: '4-2-3-1', description: 'Modern formation' },
    { id: '4-1-4-1', name: '4-1-4-1', description: 'Possession formation' },
    { id: '3-4-3', name: '3-4-3', description: 'Wing-focused formation' },
  ];

  return (
    <ResponsiveContainer maxWidth="2xl">
      <h1 className="text-3xl font-bold text-white mb-6">Formations</h1>

      <ResponsiveGrid
        columns={{ mobile: 1, tablet: 2, desktop: 3 }}
        gap={6}
      >
        {formations.map((formation) => (
          <div
            key={formation.id}
            onClick={() => setSelectedFormation(formation.id)}
            className="bg-gray-800 rounded-lg p-6 cursor-pointer hover:bg-gray-700 transition-colors active:scale-95"
          >
            <h3 className="text-xl font-semibold text-white mb-2">
              {formation.name}
            </h3>
            <p className="text-gray-400">{formation.description}</p>
          </div>
        ))}
      </ResponsiveGrid>

      {/* Formation Details Modal (full-screen on mobile) */}
      <ResponsiveModal
        isOpen={!!selectedFormation}
        onClose={() => setSelectedFormation(null)}
        title={formations.find((f) => f.id === selectedFormation)?.name}
        size="lg"
      >
        <div className="space-y-4">
          <p className="text-gray-300">
            Detailed formation analysis and tactics...
          </p>
          <TouchButton variant="primary" fullWidth onClick={() => {}}>
            Apply Formation
          </TouchButton>
        </div>
      </ResponsiveModal>

      {/* Mobile FAB for quick add */}
      {isMobile && (
        <MobileFAB
          onClick={() => {/* Create custom formation */}}
          icon={<span>+</span>}
          label="Create"
          extended
        />
      )}
    </ResponsiveContainer>
  );
};

/**
 * Example 4: Touch-Optimized Form
 * Shows proper touch target sizing and mobile keyboard types
 */
export const PlayerForm: React.FC = () => {
  const [name, setName] = useState('');
  const [number, setNumber] = useState('');
  const [email, setEmail] = useState('');
  const [errors, setErrors] = useState<Record<string, string>>({});

  const handleSubmit = () => {
    // Validation logic
    const newErrors: Record<string, string> = {};
    if (!name) newErrors.name = 'Name is required';
    if (!number) newErrors.number = 'Number is required';
    setErrors(newErrors);
  };

  return (
    <ResponsiveContainer maxWidth="md">
      <h1 className="text-2xl font-bold text-white mb-6">Add Player</h1>

      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Player Name
          </label>
          <input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            placeholder="Enter player name"
            className="w-full min-h-[44px] px-4 py-3 bg-gray-800 border border-gray-700 rounded-lg text-white"
          />
          {errors.name && (
            <p className="mt-1 text-sm text-red-500">{errors.name}</p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Jersey Number
          </label>
          <input
            type="number"
            inputMode="numeric"
            value={number}
            onChange={(e) => setNumber(e.target.value)}
            placeholder="Enter number"
            className="w-full min-h-[44px] px-4 py-3 bg-gray-800 border border-gray-700 rounded-lg text-white"
          />
          {errors.number && (
            <p className="mt-1 text-sm text-red-500">{errors.number}</p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Email (optional)
          </label>
          <input
            type="email"
            inputMode="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            placeholder="player@example.com"
            className="w-full min-h-[44px] px-4 py-3 bg-gray-800 border border-gray-700 rounded-lg text-white"
          />
        </div>

        <div className="flex gap-4 pt-4">
          <TouchButton
            onClick={handleSubmit}
            variant="primary"
            size="lg"
            fullWidth
          >
            Save Player
          </TouchButton>
          <TouchButton
            onClick={() => {/* Cancel */}}
            variant="ghost"
            size="lg"
          >
            Cancel
          </TouchButton>
        </div>
      </div>
    </ResponsiveContainer>
  );
};

// Placeholder components for examples
const SoccerField = () => <div className="bg-green-600 w-full h-full" />;
const Players = ({ onPlayerTap }: { onPlayerTap: (id: string) => void }) => <></>;
const findPlayerAtPosition = (pos: { x: number; y: number }) => null;
*/

// Export empty objects to prevent import errors
export const MobileAppLayout = () => null;
export const MobileTacticalBoard = () => null;
